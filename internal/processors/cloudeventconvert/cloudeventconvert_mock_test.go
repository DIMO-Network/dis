// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudeventconvert.go
//
// Generated by this command:
//
//	mockgen -source=./cloudeventconvert.go -destination=./cloudeventconvert_mock_test.go -package=cloudeventconvert
//

// Package cloudeventconvert is a generated GoMock package.
package cloudeventconvert

import (
	context "context"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/model-garage/pkg/cloudevent"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudEventModule is a mock of CloudEventModule interface.
type MockCloudEventModule struct {
	ctrl     *gomock.Controller
	recorder *MockCloudEventModuleMockRecorder
}

// MockCloudEventModuleMockRecorder is the mock recorder for MockCloudEventModule.
type MockCloudEventModuleMockRecorder struct {
	mock *MockCloudEventModule
}

// NewMockCloudEventModule creates a new mock instance.
func NewMockCloudEventModule(ctrl *gomock.Controller) *MockCloudEventModule {
	mock := &MockCloudEventModule{ctrl: ctrl}
	mock.recorder = &MockCloudEventModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudEventModule) EXPECT() *MockCloudEventModuleMockRecorder {
	return m.recorder
}

// CloudEventConvert mocks base method.
func (m *MockCloudEventModule) CloudEventConvert(ctx context.Context, msgData []byte) ([]cloudevent.CloudEventHeader, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudEventConvert", ctx, msgData)
	ret0, _ := ret[0].([]cloudevent.CloudEventHeader)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloudEventConvert indicates an expected call of CloudEventConvert.
func (mr *MockCloudEventModuleMockRecorder) CloudEventConvert(ctx, msgData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudEventConvert", reflect.TypeOf((*MockCloudEventModule)(nil).CloudEventConvert), ctx, msgData)
}
