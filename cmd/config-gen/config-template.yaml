## Generated by config-gen DO NOT EDIT
input:
  label: "ingest-server for {{ .IntegrationName }}"
  http_server:
    path: /integration/{{ .IntegrationID }}/store
    allowed_verbs:
      - POST
    timeout: 5s
    rate_limit:
      label: "integration-ratet-limit"
      local:
        count: 100000
        interval: 1s
    sync_response:
      status: "200"
      headers:
        Content-Type: application/octet-stream
pipeline:
  processors:
    - label: convert_cloudEvent_{{ .IntegrationName }}
      convert_cloudEvent:
        moduleName: {{ .ModuleName }}
        moduleConfig: {{ base64 .ModuleConfig }}
    - catch:
        - label: "convert_cloudEvent_errors"
          log:
            level: WARN
            message: "failed to convert to cloudEvent: ${!error()}"
            fields_mapping: |
              source = "{{ .IntegrationName }}/{{ .IntegrationID }}"
        - mapping: root = deleted()
output:
  broker:
    pattern: fan_out
    outputs:
      - label: "clickhouse_signal_insert_{{ .IntegrationName }}"
        drop_on:
          error: true
          output:
            sql_insert:
              driver: clickhouse
              dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=200ms&max_execution_time=60
              table: signal
              columns: []
              args_mapping: root = this
              batching:
                count: 10000
                byte_size: 0
                period: "200ms"
                check: ""
              processors:
                - label: convert_signals
                  dimo_signal_convert:
                    moduleName: {{ .ModuleName }}
                    moduleConfig: {{ base64 .ModuleConfig }}
                - catch:
                    - label: "log_convert_errors"
                      log:
                        level: WARN
                        message: "status processing failed: ${!error()}"
                        fields_mapping: |
                          vehicleTokenId = this.tokenId.or(-1)
                          source = this.source.or("unknown")
                    - mapping: root = deleted()
      - label: "object_output_{{ .IntegrationName }}"
        drop_on:
          error: true
          output:
            - broker:
                pattern: fan_out
                outputs:
                  - label: "s3_object_insert_{{ .IntegrationName }}"
                    aws_s3:
                      bucket: ${DEVICE_STATUS_S3_BUCKET}
                      path: ${!meta("index")}
                      content_type: application/json
                      region: us-east-2
                      max_in_flight: 250
                      timeout: 30s
                      credentials:
                        id: ${S3_AWS_ACCESS_KEY_ID}
                        secret: ${S3_AWS_SECRET_ACCESS_KEY}
