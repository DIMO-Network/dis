## Generated by config-gen DO NOT EDIT
input:
  label: "ingest_server_input"
  dimo_http_server:
      address: 0.0.0.0:9443
      path: /
      allowed_verbs:
        - POST
      timeout: 5s
      rate_limit: "connection_rate_limit"
      tls:
        enabled: true
        client_root_cas_file: /etc/ssl/certs/dis/root_ca.crt
        server_certs:
          - cert_file: /etc/ssl/certs/dis/tls.crt
            key_file: /etc/ssl/certs/dis/tls.key
        require_mutual_tls: true
      sync_response:
        last_message_only: true
        status: ${!meta("response_status").or(200)}
        headers:
          Content-Type: application/octet-stream

pipeline:
  processors:
    # If label name change, update the alerts
    - label: "convert_cloudevent"
      switch:
        - check: 'metadata("dimo_cloudevent_source") == "0xF26421509Efe92861a587482100c6d728aBf1CD0"'
          processors:
            - label: convert_cloudevent_ruptela
              dimo_cloudevent_convert:
                module_name: ruptela
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_cloudevent_source") == "0x5e31bBc786D7bEd95216383787deA1ab0f1c1897"'
          processors:
            - label: convert_cloudevent_autopi
              dimo_cloudevent_convert:
                module_name: autopi
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_cloudevent_source") == "0x4c674ddE8189aEF6e3b58F5a36d7438b2b1f6Bc2"'
          processors:
            - label: convert_cloudevent_macaron
              dimo_cloudevent_convert:
                module_name: macaron
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_cloudevent_source") == "0x55BF1c27d468314Ea119CF74979E2b59F962295c"'
          processors:
            - label: convert_cloudevent_compassiot
              dimo_cloudevent_convert:
                module_name: compass
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJzeW50aF9jb250cmFjdF9hZGRyIjogIjB4Nzg1MTNjOENCNEQ2QjYwNzlmODEzODUwMzc2YmM5YzdmYzhhRTY3ZiIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_cloudevent_source") == "0xSampleIntegrationAddr"'
          processors:
            - label: convert_cloudevent_sample
              dimo_cloudevent_convert:
                module_name: sample
                module_config: ewogICJzZXR0aW5nQSI6ICJ2YWx1ZUEiLAogICJzZXR0aW5nQiI6ICJ2YWx1ZUIiCn0K
        - check: 'metadata("dimo_cloudevent_source") == "0xc4035Fecb1cc906130423EF05f9C20977F643722"'
          processors:
            - label: convert_cloudevent_tesla
              dimo_cloudevent_convert:
                module_name: tesla
                module_config: ewp9Cg==
        - check: ''
          processors:
            - set_error:
                message: 'unknown connection ${! meta("dimo_cloudevent_source") }'
    # If label name change, update the alerts
    - label: "convert_cloudevent_errors"
      catch:
        - log:
            level: WARN
            message: "failed to convert to cloudevent: ${!error()}"
            fields_mapping: |
                source = metadata("dimo_cloudevent_source")
                producer = this.producer.or("unknown")
                subject = this.subject.or("unknown")
                type = this.type.or("unknown")
                id = this.id.or("unknown")
        # mutate message for http response and metrics
        - mutation: |
              meta dimo_component = "dimo_cloudevent_convert"
              meta response_message = "failed to convert to cloudevent: " + error()
        # Update error count metric
        - resource: "dimo_error_count"
        # Send bad request response
        - resource: "dimo_bad_request_sync_response"
        # Drop the message
        - mapping: root = deleted()
    # If label name change, update the alerts
    - label: "convert_signals"
      switch:
        - check: 'metadata("dimo_message_content").or("") == "dimo_partial_cloudevent"'
          processors:
            - resource: "dimo_partial_index_count"
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0xF26421509Efe92861a587482100c6d728aBf1CD0"'
          processors:
            - label: convert_signals_ruptela
              dimo_signal_convert:
                module_name: ruptela
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0x5e31bBc786D7bEd95216383787deA1ab0f1c1897"'
          processors:
            - label: convert_signals_autopi
              dimo_signal_convert:
                module_name: autopi
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0x4c674ddE8189aEF6e3b58F5a36d7438b2b1f6Bc2"'
          processors:
            - label: convert_signals_macaron
              dimo_signal_convert:
                module_name: macaron
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJhZnRlcm1hcmtldF9jb250cmFjdF9hZGRyIjogIjB4MzI1YjQ1OTQ5QzgzMzk4NmJDOThlOThhNDlGM0NBNUM1YzQ2NDNCNSIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0x55BF1c27d468314Ea119CF74979E2b59F962295c"'
          processors:
            - label: convert_signals_compassiot
              dimo_signal_convert:
                module_name: compass
                module_config: ewogICJjaGFpbl9pZCI6IDgwMDAyLAogICJzeW50aF9jb250cmFjdF9hZGRyIjogIjB4Nzg1MTNjOENCNEQ2QjYwNzlmODEzODUwMzc2YmM5YzdmYzhhRTY3ZiIsCiAgInZlaGljbGVfY29udHJhY3RfYWRkciI6ICIweDQ1ZmJDRDNlZjczNjFkMTU2ZThiMTZGNTUzOEFFMzZERWRmNjFEYTgiCn0K
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0xSampleIntegrationAddr"'
          processors:
            - label: convert_signals_sample
              dimo_signal_convert:
                module_name: sample
                module_config: ewogICJzZXR0aW5nQSI6ICJ2YWx1ZUEiLAogICJzZXR0aW5nQiI6ICJ2YWx1ZUIiCn0K
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0xc4035Fecb1cc906130423EF05f9C20977F643722"'
          processors:
            - label: convert_signals_tesla
              dimo_signal_convert:
                module_name: tesla
                module_config: ewp9Cg==
    # If label name change, update the alerts
    - label: "convert_signal_errors"
      catch:
      -  mutation: |
            meta dimo_component = "dimo_signal_convert"
            meta response_message = "failed to convert to cloudevent to signals: " + error()
      - log:
          level: WARN
          message: "failed to convert cloudevent to signals"
          fields_mapping: |
            cloudevent_source = metadata("dimo_cloudevent_source").or("unknown")
            cloudevent_producer = metadata("dimo_cloudevent_producer").or("unknown")
            cloudevent_subject = metadata("dimo_cloudevent_subject").or("unknown")
            cloudevent_type = metadata("dimo_cloudevent_type").or("unknown")
            cloudevent_id = metadata("dimo_cloudevent_id").or("unknown")
            component = metadata("dimo_component").or("unknown")
            error = if errored() { error() } else { metadata("error").or("unknown") }
      # Update error count metric
      - resource: "dimo_error_count"
      # Send bad request response
      - resource: "dimo_bad_request_sync_response"
      # Drop the message
      - mapping: root = deleted()

output:
  fallback:
    - label: "all_outputs"
      switch:
        retry_until_success: true
        strict_mode: true
        cases:
          # Output for valid signals
          - check: 'metadata("dimo_message_content").or("") == "dimo_valid_signal"'
            output:
              label: "send_signal"
              kafka:
                ack_replicas: false
                addresses:
                  - '${KAFKA_BOOTSTRAP_SERVERS:localhost}:${KAFKA_BOOTSTRAP_PORT:9092}'
                backoff:
                  initial_interval: 1s
                  max_elapsed_time: 30s
                  max_interval: 5s
                client_id: ${CONTAINER_NAME:localhost}-signal-output
                compression: '${KAFKA_COMPRESSION:none}'
                max_msg_bytes: 52428800
                max_retries: 2
                max_in_flight: 20
                key: ${!metadata("dimo_cloudevent_subject")}
                partitioner: murmur2_hash
                batching:
                  count: 0
                  byte_size: 500_000 # 0.5MB
                  period: 50ms
                target_version: 2.5.0
                timeout: 5s
                topic: '${KAFKA_SIGNALS_TOPIC:topic.device.signals}'
                metadata:
                  exclude_prefixes:
                    - dimo_cloudevent_index_value
                    - dimo_cloudevent_index
                    - dimo_cloudevent_producer
                    - dimo_cloudevent_source
                    - dimo_cloudevent_subject
                    - dimo_cloudevent_type
                    - dimo_cloudevent_id
          # Output for valid cloudevents
          - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_index").or("") != ""'
            output:
              label: "send_valid_cloudevent"
              kafka:
                ack_replicas: false
                addresses:
                  - '${KAFKA_BOOTSTRAP_SERVERS:localhost}:${KAFKA_BOOTSTRAP_PORT:9092}'
                backoff:
                  initial_interval: 1s
                  max_elapsed_time: 30s
                  max_interval: 5s
                client_id: ${CONTAINER_NAME:localhost}-valid-output
                compression: '${KAFKA_COMPRESSION:none}'
                max_msg_bytes: 52428800
                max_retries: 2
                max_in_flight: 20
                key: ${!metadata("dimo_cloudevent_subject")}
                partitioner: murmur2_hash
                batching:
                  count: 0
                  byte_size: 1_000_000 # 1MB
                  period: 50ms
                target_version: 2.5.0
                timeout: 5s
                topic: '${KAFKA_VALID_CE_TOPIC:topic.device.validcloudevents}'

          # Output for partial cloudevents
          - check: 'metadata("dimo_message_content").or("") == "dimo_partial_cloudevent" && metadata("dimo_cloudevent_index").or("") != ""'
            output:
              label: "send_partial_cloudevent"
              kafka:
                ack_replicas: false
                addresses:
                  - '${KAFKA_BOOTSTRAP_SERVERS:localhost}:${KAFKA_BOOTSTRAP_PORT:9092}'
                backoff:
                  initial_interval: 1s
                  max_elapsed_time: 30s
                  max_interval: 5s
                client_id: ${CONTAINER_NAME:localhost}-partial-output
                compression: '${KAFKA_COMPRESSION:none}'
                max_msg_bytes: 52428800
                max_retries: 2
                max_in_flight: 20
                key: ${!metadata("dimo_cloudevent_source")}_${!metadata("dimo_cloudevent_id")}
                partitioner: murmur2_hash
                batching:
                  count: 0
                  byte_size: 1_000_000 # 1MB
                  period: 50ms
                target_version: 2.5.0
                timeout: 5s
                topic: '${KAFKA_PARTIAL_CE_TOPIC:topic.device.partialcloudevents}'
          - check: ''
            output:
              label: "drop_message"
              drop: {}
    - label: "error_output"
      drop: { }
      processors:
        - mutation: |
            meta response_message = "failed send message to kafka: " + error()
        - resource: "dimo_internal_error_sync_response"
