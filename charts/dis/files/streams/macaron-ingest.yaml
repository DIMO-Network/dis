## Generated by config-gen DO NOT EDIT
input:
  label: "ingest_server_macaron"
  http_server:
    address: 0.0.0.0:8080
    path: /integration/macaron_integration_id/store
    allowed_verbs:
      - POST
    timeout: 5s
    rate_limit: "integration_rate_limit"
    sync_response:
      status: "200"
      headers:
        Content-Type: application/octet-stream
pipeline:
  processors:
    - label: convert_cloudevent_macaron
      dimo_cloudevent_convert:
        module_name: macaron
        module_config: ewogICJkZXZpY2VfYXBpX3VybCI6ICJodHRwOi8vZGV2aWNlcy1hcGktcHJvZDo4MDg2Igp9Cg==
    - catch:
        - label: "convert_cloudevent_errors"
          log:
            level: WARN
            message: "failed to convert to cloudevent: ${!error()}"
            fields_mapping: |
               source = "macaron_integration_id"
        - mapping: root = deleted()
output:
  broker:
    pattern: fan_out
    outputs:
      - label: "clickhouse_signal_insert_macaron"
        drop_on:
          error: true
          output:
            label: "clickhouse_signal_insert_macaron_file"
            file:
              path: '/tmp/clickhouse_${! counter(min: 1, max: 100) }.json'
              codec: all-bytes
            processors:
              - label: convert_signals
                dimo_signal_convert:
                  module_name: macaron
                  module_config: ewogICJkZXZpY2VfYXBpX3VybCI6ICJodHRwOi8vZGV2aWNlcy1hcGktcHJvZDo4MDg2Igp9Cg==
              - catch:
                  - label: "log_convert_errors"
                    log:
                      level: WARN
                      message: "status processing failed: ${!error()}"
                      fields_mapping: |
                        vehicleTokenId = this.tokenId.or(-1)
                        source = this.source.or("unknown")
                  - mapping: root = deleted()      
              - mapping: | 
                  root.msg = this
                  root.metadata = metadata()
      - label: "object_output_macaron"
        drop_on:
          error: true
          output:
            label: "s3_object_insert_macaron"
            file:
              path: '/tmp/s3_${! counter(min: 1, max: 100) }.json'
              codec: all-bytes
            processors:
              - mapping: | 
                  root.msg = this
                  root.metadata = metadata()