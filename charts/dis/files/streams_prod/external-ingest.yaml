## Generated by config-gen DO NOT EDIT
input:
  label: "ingest_server_input"
  dimo_http_server:
      address: 0.0.0.0:9443
      path: /
      allowed_verbs:
        - POST
      timeout: 5s
      rate_limit: "connection_rate_limit"
      tls:
        enabled: true
        client_root_cas_file: /etc/ssl/certs/dis/root_ca.crt
        server_certs:
          - cert_file: /etc/ssl/certs/dis/tls.crt
            key_file: /etc/ssl/certs/dis/tls.key
        require_mutual_tls: true
      sync_response:
        last_message_only: true
        status: ${!meta("response_status").or(200)}
        headers:
          Content-Type: application/octet-stream

pipeline:
  processors:
    - label: "file_index_migration"
      dimo_file_index_migration:
        dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_INDEX_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=5s
    - label: signal_db_migration
      dimo_signal_migration:
        dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_SIGNAL_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=5s
    # If label name change, update the alerts
    - label: "convert_cloudevent"
      switch:
        - check: 'metadata("dimo_cloudevent_source") == "0x5a87788D90f0ded17A35E4BDaCb47f1993021630"'
          processors:
            - label: convert_cloudevent_ruptela
              dimo_cloudevent_convert:
                module_name: ruptela
                module_config: ewogICJjaGFpbl9pZCI6IDEzNywKICAiYWZ0ZXJtYXJrZXRfY29udHJhY3RfYWRkciI6ICIweDljOTRDMzk1Y0JjQkRlNjYyMjM1RTBBOWQzYkI4N0FkNzA4NTYxQkEiLAogICJ2ZWhpY2xlX2NvbnRyYWN0X2FkZHIiOiAiMHhiQTU3MzhhMThkODNENDE4NDdkZkZiREM2MTAxZDM3QzY5YzlCMGNGIgp9Cg==
        - check: 'metadata("dimo_cloudevent_source") == "0xFFEE022fAb46610EAFe98b87377B42e366364a71"'
          processors:
            - label: convert_cloudevent_tesla
              dimo_cloudevent_convert:
                module_name: tesla
                module_config: ewp9Cg==
        - check: ''
          processors:
            - set_error:
                message: 'unknown connection ${! meta("dimo_cloudevent_source") }'
    # If label name change, update the alerts
    - label: "convert_cloudevent_errors"
      catch:
        - log:
            level: WARN
            message: "failed to convert to cloudevent: ${!error()}"
            fields_mapping: |
                source = metadata("dimo_cloudevent_source")
                producer = this.producer.or("unknown")
                subject = this.subject.or("unknown")
                type = this.type.or("unknown")
                id = this.id.or("unknown")
        # mutate message for http response and metrics
        - mutation: |
              meta dimo_component = "dimo_cloudevent_convert"
              meta response_message = "failed to convert to cloudevent: " + error()
        # Update error count metric
        - resource: "dimo_error_count"
        # Send bad request response
        - resource: "dimo_bad_request_sync_response"
        # Drop the message
        - mapping: root = deleted()
    # If label name change, update the alerts
    - label: "convert_signals"
      switch:
        - check: 'metadata("dimo_message_content").or("") == "dimo_partial_cloudevent"'
          processors:
            - resource: "dimo_partial_index_count"
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0x5a87788D90f0ded17A35E4BDaCb47f1993021630"'
          processors:
            - label: convert_signals_ruptela
              dimo_signal_convert:
                module_name: ruptela
                module_config: ewogICJjaGFpbl9pZCI6IDEzNywKICAiYWZ0ZXJtYXJrZXRfY29udHJhY3RfYWRkciI6ICIweDljOTRDMzk1Y0JjQkRlNjYyMjM1RTBBOWQzYkI4N0FkNzA4NTYxQkEiLAogICJ2ZWhpY2xlX2NvbnRyYWN0X2FkZHIiOiAiMHhiQTU3MzhhMThkODNENDE4NDdkZkZiREM2MTAxZDM3QzY5YzlCMGNGIgp9Cg==
        - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_type").or("") == "dimo.status" && metadata("dimo_cloudevent_source") == "0xFFEE022fAb46610EAFe98b87377B42e366364a71"'
          processors:
            - label: convert_signals_tesla
              dimo_signal_convert:
                module_name: tesla
                module_config: ewp9Cg==
    # If label name change, update the alerts
    - label: "convert_signal_errors"
      catch:
      -  mutation: |
            meta dimo_component = "dimo_signal_convert"
            meta response_message = "failed to convert to cloudevent to signals: " + error()
      - log:
          level: WARN
          message: "failed to convert cloudevent to signals"
          fields_mapping: |
            cloudevent_source = metadata("dimo_cloudevent_source").or("unknown")
            cloudevent_producer = metadata("dimo_cloudevent_producer").or("unknown")
            cloudevent_subject = metadata("dimo_cloudevent_subject").or("unknown")
            cloudevent_type = metadata("dimo_cloudevent_type").or("unknown")
            cloudevent_id = metadata("dimo_cloudevent_id").or("unknown")
            component = metadata("dimo_component").or("unknown")
            error = metadata("error").or("unknown")
      # Update error count metric
      - resource: "dimo_error_count"
      # Send bad request response
      - resource: "dimo_bad_request_sync_response"
      # Drop the message
      - mapping: root = deleted()

output:
  label: "all_outputs"
  switch:
    retry_until_success: true
    strict_mode: true
    cases:
      # Output for valid signals
      - check: 'metadata("dimo_message_content").or("") == "dimo_valid_signal"'
        output:
          label: "insert_signal"
          fallback:
            - label: "insert_signal_clickhouse"
              sql_insert:
                driver: clickhouse
                dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_SIGNAL_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&max_execution_time=600
                table: signal
                columns: []
                args_mapping: root = this
                batching:
                  count: 10000
                  byte_size: 0
                  period: "10ms"
                  check: ""
            # Drop the message, log, record metrics and send 500 response
            - label: "insert_signal_clickhouse_failure"
              drop: {}
              processors:
                -  mutation: |
                    meta dimo_component = "insert_signal_clickhouse"
                    meta response_message = "failed to store converted signals, please try again later"
                - resource: "handle_db_error"
      # Output for valid cloudevents
      - check: 'metadata("dimo_message_content").or("") == "dimo_valid_cloudevent" && metadata("dimo_cloudevent_index").or("") != ""'
        output:
          label: "insert_valid_cloudevent"
          fallback:
            - broker:
                pattern: fan_out_sequential_fail_fast
                outputs:
                  - fallback:
                    - label: "insert_valid_cloudevent_s3"
                      aws_s3:
                        bucket: ${S3_CLOUDEVENT_BUCKET}
                        path: ${!meta("dimo_cloudevent_index")}
                        content_type: application/json
                        region: us-east-2
                        max_in_flight: 250
                        timeout: 30s
                        credentials:
                          id: ${S3_AWS_ACCESS_KEY_ID}
                          secret: ${S3_AWS_SECRET_ACCESS_KEY}
                    # reject the message, log, record metrics and send 500 response
                    # reject instead of drop to avoid attempting CH index insert with no backing obj
                    - label: 'insert_valid_cloudevent_s3_failure'
                      reject: '${!metadata("fallback_error").or("failed to store converted cloudevent")}'
                      processors:
                        -  mutation: |
                            meta dimo_component = "insert_valid_cloudevent_s3"
                            meta response_message = "failed to store converted cloudevent, please try again later"
                        - resource: "handle_db_error"

                  - fallback:
                    - label: "insert_valid_cloudevent_clickhouse"
                      sql_insert:
                        driver: clickhouse
                        dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_INDEX_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=5s&max_execution_time=300
                        table: name_index
                        columns: []
                        args_mapping: root = this
                        batching:
                          count: 100000
                          byte_size: 0
                          period: "1s"
                          check: ""
                      processors:
                        - label: "split_values_valid"
                          dimo_split_values: {}
                        - catch:
                          -  mutation: |
                              meta dimo_component = "split_values_valid"
                              meta response_message = "failed to store converted cloudevent, please try again later"
                          - resource: "handle_db_error"
                          - mapping: root = deleted()

                    # Drop the message, log, record metrics and send 500 response
                    - label: 'insert_valid_cloudevent_clickhouse_failure'
                      drop: {}
                      processors:
                        -  mutation: |
                            meta dimo_component = "insert_valid_cloudevent_clickhouse"
                            meta response_message = "failed to store converted cloudevent, please try again later"
                        - resource: "handle_db_error"
            - drop: {}

      # Output for partial cloudevents
      - check: 'metadata("dimo_message_content").or("") == "dimo_partial_cloudevent" && metadata("dimo_cloudevent_index").or("") != ""'
        output:
          label: "insert_partial_cloudevent"
          drop_on:
            error: true
            output:
              broker:
                pattern: fan_out_sequential_fail_fast
                outputs:
                  - fallback:
                    - label: "insert_partial_cloudevent_s3"
                      aws_s3:
                        bucket: ${S3_EPHEMERAL_BUCKET}
                        path: ${!meta("dimo_cloudevent_index")}
                        content_type: application/json
                        region: us-east-2
                        max_in_flight: 250
                        timeout: 30s
                        credentials:
                          id: ${S3_AWS_ACCESS_KEY_ID}
                          secret: ${S3_AWS_SECRET_ACCESS_KEY}
                    # reject the message, log, record metrics and send 500 response
                    # reject instead of drop to avoid attempting CH index insert with no backing obj
                    - label: 'insert_partial_cloudevent_s3_failure'
                      reject: '${!metadata("fallback_error").or("failed to store converted cloudevent")}'
                      processors:
                        -  mutation: |
                            meta dimo_component = "insert_partial_cloudevent_s3"
                            meta response_message = "failed to store converted cloudevent"
                        - resource: "handle_db_error"

                  - fallback:
                    - label: "insert_partial_cloudevent_clickhouse"
                      sql_insert:
                        driver: clickhouse
                        dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_INDEX_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=5s&max_execution_time=300
                        table: name_index
                        columns: []
                        args_mapping: root = this
                        batching:
                          count: 100000
                          byte_size: 0
                          period: "1s"
                          check: ""
                      processors:
                        - label: "split_values_partial"
                          dimo_split_values: {}
                        - catch:
                          -  mutation: |
                              meta dimo_component = "split_values_partial"
                              meta response_message = "failed to store converted cloudevent, please try again later"
                          - resource: "handle_db_error"
                          - mapping: root = deleted()

                    # Drop the message, log, record metrics and send 500 response
                    - label: 'insert_partial_cloudevent_clickhouse_failure'
                      drop: {}
                      processors:
                        -  mutation: |
                            meta dimo_component = "insert_partial_cloudevent_clickhouse"
                            meta response_message = "failed to store converted cloudevent"
                        - resource: "handle_db_error"
      - check: ''
        output:
          label: "drop_message"
          drop: {}
