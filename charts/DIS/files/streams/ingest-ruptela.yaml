input:
  label: "ingest-server for Ruptela"
  http_server:
    path: /integration/ruptela_integration_id/store
    # ws_path: integration/ruptela_integration_id/store/ws
    allowed_verbs:
      - POST
    timeout: 5s
    rate_limit: 
      label: "integration-ratet-limit"
      local:
        count: 100000
        interval: 1s
    sync_response:
      status: "200"
      headers:
        Content-Type: application/octet-stream
pipeline:
  processors:
    - label: convert_cloudEvent_ruptela
      convert_cloudEvent:
        wasmfile: ruptela.wasm
        wasmHash: "0x98D78d711C0ec544F6fb5d54fcf6559CF41546a9"
    - catch:
      - label: "convert_cloudEvent_errors"
        log:
          level: WARN
          message: "failed to convert to cloudEvent: ${!error()}"
          fields_mapping: |
            source = "ruptela/integration_id"
      - mapping: root = deleted()
output:
  broker:
    pattern: fan_out
    outputs:
      - label: "clickhouse_signal_insert_ruptela"
        drop_on:
          error: true
          output:
            sql_insert:
              driver: clickhouse
              dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=200ms&max_execution_time=60
              table: signal
              columns: []
              args_mapping: root = this
              batching:
                count: 10000
                byte_size: 0
                period: "200ms"
                check: ""
              processors:
                - label: convert_signals
                  vss_vehicle:
                    wasmFile: ruptela.wasm
                    wasmHash: "0x98D78d711C0ec544F6fb5d54fcf6559CF41546a9"
                - catch:
                  - label: "log_convert_errors"
                    log:
                      level: WARN
                      message: "status processing failed: ${!error()}"
                      fields_mapping: |
                        vehicleTokenId = this.tokenId.or(-1)
                        source = this.source.or("unknown")
                  - mapping: root = deleted()
      - label: "object_output_ruptela"
        drop_on:
          error: true
          output:
            - broker:
                pattern: fan_out
                outputs:
                  - label: "s3_object_insert_ruptela"
                    aws_s3:
                      bucket: ${DEVICE_STATUS_S3_BUCKET}
                      path: ${!meta("index")}
                      content_type: application/json
                      region: us-east-2
                      max_in_flight: 250
                      timeout: 30s
                      credentials:
                        id: ${S3_AWS_ACCESS_KEY_ID}
                        secret: ${S3_AWS_SECRET_ACCESS_KEY}
                  - label: "clickhouse_object_insert_ruptela"
                    sql_insert:
                    driver: clickhouse
                    dsn: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/${CLICKHOUSE_DATABASE}?username=${CLICKHOUSE_USER}&password=${CLICKHOUSE_PASSWORD}&secure=true&dial_timeout=5s&max_execution_time=300
                    table: name_index
                    columns: []
                    args_mapping: root = metadata("index_values")
                    batching:
                      count: 10000
                      byte_size: 0
                      period: "200ms"
                      check: ""

